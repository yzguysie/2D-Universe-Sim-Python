# Setup

import pygame
import pygame.gfxdraw
pygame.init()
import math
import random
import time


from configparser import ConfigParser

config = ConfigParser()
"""
# parse existing file
config.read('2D Universe Sandbox.ini')

# read values from a section
fps = config.getint('engine', 'fps')
tickrate = config.getint('engine', 'tickrate')
scale = config.getint('engine', 'scale')
trail_update_rate = config.getint('engine', 'trail_update_rate')
settings_preset = config.getint('engine', 'settings_preset')
# update existing value
"""

width, height = 1280, 720
speed = 10
fps = 60
settings_preset = ""


tickrate = 30
scale = 5
trail_update_rate = 30
trail_length = 150
enable_trails = True
aa_trails = True
background_color = (0, 0, 0)
follow = True
draw_shine = True
aa_bodies = True
dist_before_deletion = 25000
panel = True
gravity = 10

font = 'arial'
font_width = int(width/100+1)

dialogue_font = pygame.font.SysFont(font, font_width)

list_sorting_rate = 10
time_ = time.time()
Physics_time = 0
Trails_time = 0
Total_time = 0
trail_draw_time = 0
list_sorting_time = 0
drawing_bodies_time = 0
panel_rank = 0
#Space Dust (Random Bodies)
enable_space_dust = True
space_dust_amount = 500
space_dust_x_variation = 800
space_dust_y_variation = 800
space_dust_x_speed_variation = 300
space_dust_y_speed_variation = 300
space_dust_min_radius = 1
space_dust_max_radius = 10
EXPLOSION_FRAGMENT_COUNT = 25
mass_before_exploding = 1000

bottom_panel = True
bottom_panel_type = 1









# parse existing file

read_from_file = True

if read_from_file:
    config.read('2D Universe Sandbox.ini')

    fps = config.getint('engine', 'fps')
    tickrate = config.getint('engine', 'tickrate')
    scale = config.getint('engine', 'scale')
    trail_update_rate = config.getint('engine', 'trail_update_rate')
    trail_length = config.getint('engine', 'trail_length')
    settings_preset = config.getint('engine', 'settings_preset')
    enable_trails = config.getboolean('engine', 'enable_trails')
    draw_shine = config.getboolean('engine', 'draw_shine')
    dist_before_deletion = config.getint('engine', 'dist_before_deletion')
    gravity = config.getint('engine', 'gravity')
    speed = config.getint('engine', 'speed')
    
    enable_space_dust = config.getboolean('spaceDust','enable_space_dust')
    space_dust_amount = config.getint('spaceDust', 'space_dust_amount')
    space_dust_x_variation = config.getint('spaceDust', 'space_dust_x_variation')
    space_dust_y_variation = config.getint('spaceDust', 'space_dust_y_variation')
    space_dust_x_speed_variation = config.getint('spaceDust', 'space_dust_x_speed_variation')
    space_dust_y_speed_variation = config.getint('spaceDust', 'space_dust_y_speed_variation')
    space_dust_min_radius = config.getint('spaceDust', 'space_dust_min_radius')
    space_dust_max_radius = config.getint('spaceDust', 'space_dust_min_radius')

    bottom_panel_type = config.getint('engine', 'bottom_panel_type')
    # update existing value

if (settings_preset == 1):
    enable_trails = False
    list_sorting_rate = 3
    fps = 30
    tickrate = 30
    draw_shine = False

   
if (settings_preset == 2):
    trail_update_rate = 15
    trail_length = int(trail_update_rate/2)
    list_sorting_rate = 3
    fps = 60
    tickrate = 30
    draw_shine = True

   
if (settings_preset == 3):
    trail_update_rate = 30
    trail_length = int(trail_update_rate/2)
    list_sorting_rate = 5
    fps = 60
    tickrate = 60
    draw_shine = True

   
if (settings_preset == 4):
    trail_update_rate = 60
    trail_length = int(trail_update_rate/2)
    list_sorting_rate = 10
    fps = 120
    tickrate = 60
    draw_shine = True
   
   
if (settings_preset == 5):
    trail_update_rate = 120
    trail_length = int(trail_update_rate/2)
    list_sorting_rate = 15
    fps = 240
    tickrate = 120
    draw_shine = True

   
if (settings_preset == 6):
    enable_trails = False
    fps = 240
    tickrate = 240
    list_sorting_rate = 30

   

if space_dust_min_radius <= 0:
    space_dust_min_radius = 1

if space_dust_max_radius < space_dust_min_radius:
    space_dust_max_radius = space_dust_min_radius
   
if trail_update_rate > fps:
    trail_update_rate = fps
if trail_update_rate <= 0:
    trail_update_rate = fps
if list_sorting_rate > fps:
    trail_update_rate = fps
white = (255, 255, 255)
black = (0, 0, 0)
red = (255, 0, 0)
green = (0, 255, 0)
blue = (0, 0, 255)

yellow = (255, 255, 0)
idk = (255, 0, 255)
idk2 = (0, 255, 255)

gray = (128, 128, 128)
dark_gray = (64, 64, 64)
light_gray = (192, 192, 192)
light_blue = (102, 178, 255)
dark_blue = (0, 0, 192)

EXPLOSION_MOMENTUM_RANGE = 100

bottom_panel = True

making_body_2 = False

display_update_time = 0

frames = 0
ticks = 0
class body:
    def __init__(self, x, y, xspeed, yspeed, mass, color, name):
        self.x = x
        self.y = y
        self.xspeed = xspeed
        self.yspeed = yspeed
        self.radius = ((mass*200)**(1/3))
        self.color = color
        self.mass = mass
        self.name = name
        self.last_pos_x = []
        self.last_pos_y = []

    def draw(self):
        if abs(self.x/scale+width/2) < width+self.radius/scale and abs(self.y/scale+height/2) < height+self.radius/scale:
            pygame.gfxdraw.filled_circle(window, int(self.x/scale+width/2), int(self.y/scale+height/2), int(self.radius/scale+.5), self.color)
            if aa_bodies:
                pygame.gfxdraw.aacircle(window, int(self.x/scale+width/2), int(self.y/scale+height/2), int(self.radius/scale+.5), self.color)
            if draw_shine:
                pygame.draw.circle(window, white, (int(self.x/scale+width/2), int(self.y/scale+height/2)), int((self.radius*0.8)/scale+.5), int(self.radius/scale/5), draw_top_right=True)

    def draw_at_coords(self):

        pygame.gfxdraw.filled_circle(window, int(self.x), int(self.y), int(self.radius+.5), self.color)
        if aa_bodies:
            pygame.gfxdraw.aacircle(window, int(self.x), int(self.y), int(self.radius+.5), self.color)
        if draw_shine:
            pygame.draw.circle(window, white, (int(self.x), int(self.y)), int((self.radius*0.8)+.5), int(self.radius/5), draw_top_right=True)
    def move(self):
        self.x += xspeed
        self.y += yspeed
    def draw_trail(self):
        if len(self.last_pos_x) > trail_length:
            self.last_pos_x.pop(trail_length)
        if len(self.last_pos_y) > trail_length:
            self.last_pos_y.pop(trail_length)

       
        for i in range(len(self.last_pos_x)):
            if i == 0:
                x_dist = self.last_pos_x[i] - self.x
                y_dist = self.last_pos_y[i] - self.y
                points = [((self.x)/scale+width/2,(self.y)/scale+height/2)]
                if len(self.last_pos_x) < 3:
                    pygame.draw.line(window, self.color, ((((self.last_pos_x[i]))/scale)+width/2,((self.last_pos_y[i])+0*(1))/scale+height/2), ((self.x)/scale+width/2,(self.y)/scale+height/2), int((self.radius/(3*scale)+.5)))

            else:
               
                x_dist = self.last_pos_x[i] - self.x
                y_dist = self.last_pos_y[i] - self.y
                points.append(((((self.last_pos_x[i]))/scale)+width/2,((self.last_pos_y[i])+0*(1))/scale+height/2))
                if len(self.last_pos_x) < 3:
                    pygame.draw.line(window, self.color, ((((self.last_pos_x[i]))/scale)+width/2,((self.last_pos_y[i])+0*(1))/scale+height/2), ((self.last_pos_x[i-1])/scale+width/2,(self.last_pos_y[i-1])/scale+height/2), int((self.radius/(3*scale))+1))
        if len(self.last_pos_x) > 2:
            pygame.draw.lines(window, self.color, False, points, int((self.radius/(3*scale))+1))
    def consume(self, consumed):
        if self.mass >= mass_before_exploding and consumed.mass >= mass_before_exploding:
            self.explode(EXPLOSION_FRAGMENT_COUNT)
            consumed.explode(EXPLOSION_FRAGMENT_COUNT)
            return
            
        combined_mass = self.mass+consumed.mass
        self.radius = math.pow((self.radius**3+consumed.radius**3), 1/3)
        self.xspeed = ((self.xspeed*self.mass)+(consumed.xspeed*consumed.mass))/combined_mass
        self.yspeed = ((self.yspeed*self.mass)+(consumed.yspeed*consumed.mass))/combined_mass
        self.x = ((self.x*self.mass)+(consumed.x*consumed.mass))/combined_mass
        self.y = ((self.y*self.mass)+(consumed.y*consumed.mass))/combined_mass
        self.mass += consumed.mass
        for i in range(len(bodies)):
            if bodies[i].name == consumed.name:
                bodies_to_delete.add(consumed.name)
                break

    def collide(self, num_bodies):
        pass     
               

    def calc_distance(self, other):
        x_dist = (self.x-other.x)
        y_dist = (self.y-other.y)
        total_dist = (math.sqrt(x_dist**2+y_dist**2))
        return (x_dist, y_dist, total_dist)

    


    def explode(self, num_bodies):
        
        mass_to_go = self.mass/1.1
        bodies_to_go = num_bodies

        for i in range(num_bodies):
            currentMass = mass_to_go/bodies_to_go
            currentX = self.x+random.randint(-int(self.radius*4), int(self.radius*4))
            currentY = self.y+random.randint(-int(self.radius*4), int(self.radius*4))
            currentXspeed = self.xspeed + random.randint(-EXPLOSION_MOMENTUM_RANGE, EXPLOSION_MOMENTUM_RANGE)
            currentYspeed = self.yspeed + random.randint(-EXPLOSION_MOMENTUM_RANGE, EXPLOSION_MOMENTUM_RANGE)
            bodies.append(body(currentX, currentY, currentXspeed, currentYspeed, currentMass, self.color, self.name+" fragment " + str(i)))
            bodies_to_go -= 1
            mass_to_go -= currentMass
            bodies_to_delete.add(self.name)

def calc_center_of_mass(bodies):
    center_x = 0
    center_y = 0
    weight = 0
    for body_ in bodies:
        center_x += body_.x*body_.mass
        center_y += body_.y*body_.mass
        weight += body_.mass
    return (center_x/weight, center_y/weight)


def print_time_used(time_name, time, used_time, total_time):
    print("Time used for " + time_name + ": " + str(int(time*10000)/10000))
    print("Percent of used time" + ": " + str(int(time*10000/used_time)/100) + "%")
    print("Percent of total time" + ": " + str(int(time*10000/total_time)/100) + "%")
bodies = [body(width/2+100, height/2, 0, 0, 1000, (220, 220, 20), "Sun"),
          ]
display_bodies = []

if enable_space_dust:
    for i in range(space_dust_amount):
        space_dust_x = width/2+random.randint(-space_dust_x_variation, space_dust_x_variation)
        space_dust_y = height/2-random.randint(-space_dust_y_variation, space_dust_y_variation)
        space_dust_xspeed = random.randint(-space_dust_x_speed_variation, space_dust_x_speed_variation)
        space_dust_yspeed = random.randint(-space_dust_y_speed_variation, space_dust_y_speed_variation)
        space_dust_mass = random.randint(1, 100)
        bodies.append(body(space_dust_x, space_dust_y, space_dust_xspeed, space_dust_yspeed, space_dust_mass, (random.randint(0,255), random.randint(0,255), random.randint(0,255)), "Space dust"+str(i)))



def all_pair(items, func, data):
    global Physics_time
    global Trails_time
    global trail_draw_time
    gravity_start = time.time()
    if frames % int(fps/tickrate) == 0:
        for i in range(0, len(items)):
            for j in range(i+1, len(items)):
                func(items[i], items[j], data)
    Physics_time += time.time()-gravity_start
    trail_start = time.time()
    for i in range(0, len(items)):
        currentbody = items[i]
        if enable_trails and frames % int(fps/trail_update_rate) == 0:
            currentbody.last_pos_x.insert(0, currentbody.x)
            currentbody.last_pos_y.insert(0, currentbody.y)
        currentbody.x += currentbody.xspeed/(fps/speed)
        currentbody.y += currentbody.yspeed/(fps/speed)
        trail_draw_start = time.time()

        trail_draw_time += time.time()-trail_draw_start
        if abs(currentbody.x - items[0].x) > dist_before_deletion or abs(currentbody.y - items[0].y) > dist_before_deletion:
            bodies_to_delete.add(currentbody.name)

    Trails_time += time.time()-trail_start
       
def bodies_gravity(body_a, body_b, bodies_to_delete):
    while body_a.name==body_b.name:
        body_b.name += str("-copy")
    body_distance_x, body_distance_y, body_distance = body_a.calc_distance(body_b)
    if body_distance == 0:
        print("WARN: DIVISION BY 0 in bodies_gravity (body_distance = 0) (at " + str(time.time()-time_) + " seconds)")
        body_distance = 0.001
    body_force_x = ((body_a.mass*body_b.mass)/body_distance**2)*body_distance_x*gravity
    body_force_y = ((body_a.mass*body_b.mass)/body_distance**2)*body_distance_y*gravity

    body_a.xspeed -= (body_force_x/body_a.mass)/(tickrate/speed)
    body_a.yspeed -= (body_force_y/body_a.mass)/(tickrate/speed)
   
    body_b.xspeed += (body_force_x/body_b.mass)/(tickrate/speed)
    body_b.yspeed += (body_force_y/body_b.mass)/(tickrate/speed)

    if body_distance < body_b.radius+body_a.radius:
       
        if body_a.mass >= body_b.mass:
            body_a.consume(body_b)
           
        else:
            body_b.consume(body_a)

           
def bodies_draw(items):
    
    for body in items:
        body.draw()


def move_all(items, x, y):
    for body in items:
        body.x += x
        body.y += y
        for i in range(len(body.last_pos_x)):
            body.last_pos_x[i] += x
           
        for i in range(len(body.last_pos_y)):
            body.last_pos_y[i] += y

def info_panel(body):
    panel_width = width/8
    panel_height = height/2.5
    panel_x = width-panel_width
    panel_y = height/2-panel_height/2
    panel_rect = (panel_x, panel_y, panel_width, panel_height)
    
    pygame.draw.rect(window, dark_gray, panel_rect)
        
    dialogue = dialogue_font.render("Name: " + panel_body.name, True, white)
    window.blit(dialogue, (width-panel_width+font_width/2, height/2-(panel_height/2-font_width)))
    
    dialogue = dialogue_font.render("Radius: " + str(int(panel_body.radius+.5)), True, white)
    window.blit(dialogue, (width-panel_width+font_width/2, height/2-(panel_height/2-font_width*2.5)))
    
    dialogue = dialogue_font.render("Mass: " + str(int(panel_body.mass+.5)), True, white)
    window.blit(dialogue, (width-panel_width+font_width/2, height/2-(panel_height/2-font_width*4)))

    dialogue = dialogue_font.render("Coordinates: " + str(int(panel_body.x+.5)) + ", " + str(int(panel_body.y+.5)), True, white)
    window.blit(dialogue, (width-panel_width+font_width/2, height/2-(panel_height/2-font_width*5.5)))
    
    dialogue = dialogue_font.render("Speed: " + str(int(panel_body.xspeed+.5)) + ", " + str(-int(panel_body.yspeed+.5)), True, white)
    window.blit(dialogue, (width-panel_width+font_width/2, height/2-(panel_height/2-font_width*7)))
    for i in range(len(bodies)):
        panel_rank = 0

        if bodies[i].name == panel_body.name:
            panel_rank = i
            break
    dialogue = dialogue_font.render("Size Rank: " + str(panel_rank+1) + "/" + str(len(bodies)), True, white)
    dialogue_rect = dialogue.get_rect()
    window.blit(dialogue, (width-panel_width+font_width/2, height/2-(panel_height/2-font_width*8.5)))

add_panel_width = width-width/8
add_panel_height = height/5
add_panel_x = width/16
add_panel_y = height-add_panel_height







def bottom_panel(display_bodies, bottom_panel_type):
    panel_rect = (add_panel_x, add_panel_y, add_panel_width, add_panel_height)
    pygame.draw.rect(window, dark_gray, panel_rect)

    
    if bottom_panel_type == 1:
        for i in range(len(display_bodies)):
            display_body = display_bodies[i]
            display_body.x = (add_panel_x+(i/len(display_bodies))*(add_panel_width))+add_panel_width/len(display_bodies)/2
            display_body.y = (height-add_panel_height/2)
            display_body.draw_at_coords()
            
            dialogue = dialogue_font.render(display_body.name, True, white)
            dialogue_rect = dialogue.get_rect(center=(display_body.x, display_body.y-(display_body.radius)-font_width))
            window.blit(dialogue, dialogue_rect)
            
    elif bottom_panel_type == 2:
        for i in range(len(display_bodies)):
            display_body = display_bodies[i]
            display_body.x = (add_panel_x+(i/len(display_bodies))*(add_panel_width))+add_panel_width/len(display_bodies)/2
            display_body.y = (height-add_panel_height/2)
            display_body.draw_at_coords()

            dialogue = dialogue_font.render(display_body.name, True, white)
            dialogue_rect = dialogue.get_rect(center=(display_body.x, display_body.y-(display_body.radius)-font_width))
            window.blit(dialogue, dialogue_rect)
    
    

pygame.mouse.set_visible(True)
window = pygame.display.set_mode([width, height])
pygame.display.set_caption('Budget Universe Sandbox')


clock = pygame.time.Clock()
move_all(bodies, -width/2, -height/2)
panel_body = body(width/2, height/2-250, 30, 0, 10, blue, "noonebetterusethisnameorproblemswilloccur")
if len(bodies) > 0:
    panel_body = bodies[0]
#last_mouse_pos_x, last_mouse_pos_y = pygame.mouse.get_pos()
if panel_rank > len(bodies) - 1:
    panel_rank = 0
    print("WARN: panel_rank out of range of list bodies, panel_rank set to 0. (at " + str(time.time()-time_) + " seconds)")
center_x, center_y = calc_center_of_mass([bodies[panel_rank]])

selected_body = body(width/2, height/2-250, 30, 0, 10, blue, "User made " + str(random.randint(0, 100000000)))
making_body = False
playing = True
start = time.time()-1

while playing:
    if frames % int(fps/10) == 0:
        fps_ = int(1/(time.time()-start)+.5)
    start = time.time()
    window.fill(background_color)
    dialogue = dialogue_font.render("FPS: " + str(fps_), True, white)
    dialogue_rect = dialogue.get_rect()
    window.blit(dialogue, dialogue_rect)
    

    list_sorting_start = time.time()


    bodies.sort(key=lambda x: x.mass, reverse=True)
    list_sorting_time += time.time()-list_sorting_start
    mouse_x_change, mouse_y_change = pygame.mouse.get_rel()
    bodies_to_delete = set()
    all_pair(bodies, bodies_gravity, bodies_to_delete)

    

    for event in pygame.event.get():
       
        if event.type == pygame.QUIT:
            playing = False
            break
       
        if event.type == pygame.MOUSEWHEEL:
            old_scale = scale
            scale *= 1-event.y/50
            if scale <= 0.1:
                scale = 0.1
       
               
            x,y = pygame.mouse.get_pos()
            if not follow:
                move_all(bodies, (x-width/2)*(scale-old_scale), (y-height/2)*(scale-old_scale))

        if event.type == pygame.MOUSEBUTTONDOWN and pygame.mouse.get_pressed()[0]:
            x,y = pygame.mouse.get_pos()
            """
            for currentbody in bodies:
                if abs(((currentbody.x/scale)+width/2)-x) < currentbody.radius/scale+5 and abs(((currentbody.y/scale)+height/2)-y) < currentbody.radius/scale+5:
                    if panel_body == currentbody:
                        panel = not panel
                    else:
                        panel = True
                    panel_body = currentbody
                    break"""
            if bottom_panel:
                if bottom_panel_type == 1:
                    if making_body:
                        
                        making_body = False
                        making_body_2 = True
                    else:
                        last_selected = selected_body
                        selected_new = False
                        for display_body in display_bodies:
                            if abs(display_body.x-x) < display_body.radius+5 and abs(display_body.y-y) < display_body.radius+5:
                                selected_body = body((display_body.x)+width/2, (display_body.y)+width/2, 0, 0, display_body.mass, display_body.color, display_body.name)
                                if selected_body.mass < 0:
                                    selected_body.radius = 42
                                start_x = selected_body.x
                                start_y = selected_body.y
                                making_body = True
                                selected_new = True
                                break
                        if not selected_new:
                            x,y = pygame.mouse.get_pos()
                            selected_body = body((x)+width/2, (y)+width/2, 0, 0, selected_body.mass, selected_body.color, selected_body.name)
                            if selected_body.mass < 0:
                                selected_body.radius = 42
                            start_x = selected_body.x
                            start_y = selected_body.y
                            making_body_2 = True
                            making_body = True
                                                        
                if bottom_panel_type == 2:
                    for clicked_body in display_bodies:
                        if abs(clicked_body.x-x) < clicked_body.radius+5 and abs(clicked_body.y-y) < clicked_body.radius+5:
        
                            for i in range(len(bodies)):
                                if bodies[i].name == clicked_body.name:
                                    panel_body = bodies[i]
                                    break

        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                playing = False
                break
            
            if event.key == pygame.K_UP:
                panel = True
                panel_body = bodies[0]
                
            if event.key == pygame.K_DOWN:
                panel = True
                panel_body = bodies[len(bodies)-1]
                
            if event.key == pygame.K_RIGHT:
                if panel_rank+1 < len(bodies):
                    panel = True
                    panel_body = bodies[panel_rank+1]
                    
            if event.key == pygame.K_LEFT:
                if panel_rank-1 >= 0:
                    panel = True
                    panel_body = bodies[panel_rank-1]
                    
            if event.key == pygame.K_SPACE:
                follow = not follow
                
            if event.key == pygame.K_RETURN:
                if panel_rank+1 < len(bodies):
                    panel_body = bodies[panel_rank+1]
                    
            if event.key == pygame.K_TAB:
                x,y = pygame.mouse.get_pos()
                for currentbody in bodies:
                    if abs(((currentbody.x/scale)+width/2)-x) < currentbody.radius/scale+5 and abs(((currentbody.y/scale)+height/2)-y) < currentbody.radius/scale+5:
                        currentbody.explode(EXPLOSION_FRAGMENT_COUNT)
                        break
                    
                for currentbody in bodies:
                    if abs(((currentbody.x/scale)+width/2)-x) < currentbody.radius/scale+15 and abs(((currentbody.y/scale)+height/2)-y) < currentbody.radius/scale+15:
                        currentbody.explode(EXPLOSION_FRAGMENT_COUNT)
                        break
                    
    bodies = [body for body in bodies if body.name not in bodies_to_delete]
    
    for i in range(len(bodies)):
        panel_rank = 0

        if bodies[i].name == panel_body.name:
            panel_rank = i
            break
    
    if panel_rank > len(bodies) - 1:
        panel_rank = 0
        print("WARN: panel_rank out of range of list bodies, panel_rank set to 0. (at " + str(time.time()-time_) + " seconds)")
    
    
    if bottom_panel:
        if bottom_panel_type == 1:
            if making_body:
                x,y = pygame.mouse.get_pos()
                selected_body.x = (x-width/2)*scale
                start_x = (x-width/2)*scale
                selected_body.y = (y-height/2)*scale
                start_y = (y-height/2)*scale
                selected_body.draw()
                

            if making_body_2:
                if pygame.mouse.get_pressed()[0]:
                    x,y = pygame.mouse.get_pos()
                    #selected_body.x = (x-width/2)*scale
                    #selected_body.y = (y-height/2)*scale
                    if making_body:
                        making_body = False

                    selected_body.xspeed = (start_x - (x-width/2)*scale)/2
                    selected_body.yspeed = (start_y - (y-height/2)*scale)/2
                    selected_body.draw()
                else:
                    selected_body.draw()
                    bodies.append(selected_body)
                    making_body_2 = False
                    
        if bottom_panel_type == 2:
            for i in range(len(bodies)):
                panel_rank = 0

                if bodies[i].name == panel_body.name:
                    panel_rank = i
                    break
            
            if panel_rank > len(bodies) - 1:
                panel_rank = 0
            
    center_x, center_y = calc_center_of_mass([bodies[panel_rank]])




        

        
        
    if pygame.mouse.get_pressed()[2]:
        if follow:
            follow = False
           
        move_all(bodies, mouse_x_change*scale, mouse_y_change*scale)


    
    if pygame.mouse.get_pressed()[1]:
        move_all(bodies, -center_x, -center_y)

    if follow:
        move_all(bodies, -center_x, -center_y)
   
    panel_width = width/8
    panel_height = height/2.5
    panel_x = width-panel_width
    panel_y = height/2-panel_height/2
    panel_rect = (panel_x, panel_y, panel_width, panel_height)

    trail_draw_start = time.time()
    if enable_trails:
        for currentbody in bodies:
            currentbody.draw_trail()
    Trails_time += time.time() - trail_draw_start





    drawing_bodies_start = time.time()
    bodies_draw(bodies)
    for currentbody in bodies:
        if int(currentbody.radius/scale) > 0:
            dialogue = dialogue_font.render(currentbody.name, True, white)
            dialogue_rect = dialogue.get_rect(center=(currentbody.x/scale+width/2, currentbody.y/scale+height/2-(currentbody.radius/(scale))-font_width))
            window.blit(dialogue, dialogue_rect)
    drawing_bodies_time += time.time()-drawing_bodies_start


    if bottom_panel:
        if bottom_panel_type == 1:
            display_bodies = []
            display_large_star = body(0, 0, 0, 0, 2500, light_blue, "Large Star (Display)")
            display_small_star = body(0, 0, 0, 0, 500, yellow, "Small Star (Display)")
            display_negative_mass_star = body(0, 0, 0, 0, 500, yellow, "Negative Star (Display)")
            display_negative_mass_star.mass = -500
            display_negative_mass_star.radius = 50
            display_large_planet = body(0, 0, 0, 0, 200, dark_blue, "Large Planet (Display)")
            display_small_planet = body(0, 0, 0, 0, 50, blue, "Small Planet (Display)")
            display_large_asteroid = body(0, 0, 0, 0, 20, gray, "Large Asteroid (Display)")
            display_small_asteroid = body(0, 0, 0, 0, 5, light_gray, "Small Asteroid (Display)")

            display_bodies.append(display_large_star)
            display_bodies.append(display_small_star)
            display_bodies.append(display_negative_mass_star)
            display_bodies.append(display_large_planet)
            display_bodies.append(display_small_planet)
            display_bodies.append(display_large_asteroid)
            display_bodies.append(display_small_asteroid)
            bottom_panel(display_bodies, bottom_panel_type)

        if bottom_panel_type == 2:
            display_bodies = []
            i = 0
            while i < 8 and i < len(bodies):
                display_bodies.append(body(0, 0, 0, 0, bodies[i].mass, bodies[i].color, bodies[i].name))
                i += 1
            bottom_panel(display_bodies, bottom_panel_type)
            

    if panel:
        info_panel(panel_body)
        
    center_x, center_y = calc_center_of_mass([bodies[panel_rank]])

   
    dialogue = dialogue_font.render("Bodies: " + str(len(bodies)), True, white)
    dialogue_rect = dialogue.get_rect(center=(width/30, height/30))
    window.blit(dialogue, dialogue_rect)
    
    
    display_update_start = time.time()
    pygame.display.flip()
    display_update_time += time.time()-display_update_start
    Total_time += time.time()-start
    clock.tick(fps)
    frames += 1
    fps_counter = time.time()-start
   
    if frames % int(fps/list_sorting_rate) == 0:
        ticks += 1
   

print()
print()
print("---------------- Time Statistics ----------------")
print()
print("Time passed: " + str(time.time()-time_))
print("Time used for any computations: " + str(Total_time))
print()
print("Gravity Physics:")
print_time_used("physics", Physics_time, Total_time, time.time()-time_)
print()
print("Drawing Bodies:")
print_time_used("drawing bodies", drawing_bodies_time, Total_time, time.time()-time_)
print()
print("Trails:")
print_time_used("trails", Trails_time, Total_time, time.time()-time_)
print()
print("Display.flip():")
print_time_used("updating display", display_update_time, Total_time, time.time()-time_)
print()


pygame.quit()


